<html>
<head>
    <title>SimpleStub: Overview</title>
</head>
<body>

    <h2>Overview</h2>
    <p>When writing unit tests, it is often necessary to create objects that are passed to the System Under Test (SUT).
    These objects, sometimes known by the generic term, <i>test doubles</i>, sometimes need behavior, and sometimes not,
    but are usually required.</p>

    <p>It is certainly possible to code these test doubles manually, often with the aid of an IDE. But that tends to
    clutter up a test class, and any addition of or change to methods in the base class or interface will require
    changes to the test, even if they are not being used.</p>

    <p>A common way around this is to use Mock frameworks, specifying the behavior of only the methods of interest.
    But that specification can sometimes be difficult to read.</p>

    <p>Simplestub takes a different approach. The developer writes only enough of a stub as needed by the test,
    ignoring any other methods. If a pure stub is wanted, the base interface or abstract class is sufficient.
    SimpleStub will then instantiate a suitable object, filling in any abstract methods automatically and invisibly.</p>

    <p>For example, the <code>java.io.ObjectOutput</code> interface has 17 methods
    in JDK 1.6, but in a test that only expects to write byte arrays, the following stub could be sufficient:</p>
    <div class="source">
        <pre>
        <b>public abstract class</b> ObjectOutputStub <b>implements</b> ObjectOutput {

            <b>private</b> List&lt;<b>byte</b>[]&gt; bytes = <b>new</b> ArrayList&lt;<b>byte</b>[]&gt;
            <b>boolean</b> closed;

            <b>byte</b>[][] getWrittenBytes() { <b>return</b> b.toArray(<b>new byte</b>[][b.size()]); }
            <b>boolean</b> isClosed() { <b>return</b> closed; }

            <b>public void</b> write(<b>byte</b>[] b) { bytes.add(b); }
            <b>public void</b> close() { closed = true; }
        }</pre>
    </div>

    The test class can be instantiated easily:
    <div class="source">
        <pre>
        <b>import</b> com.meterware.simplestub.Stub;

        ObjectOutputStub objectOutput = Stub.createStub(ObjectOutputStub.<b>class</b>);</pre>
    </div>

    <p>Calls to the defined <code>write</code> method will be captured, and may be retrieved as the test progresses.
        Any call to one of the other methods will do nothing. Alternately, one can set the <code>strict</code> parameter
        of the annotation. If it is set, calls to the undefined methods will throw an exception, generated by SimpleStub.
        This can be useful when working to understand the calls made by legacy code.
    </p>


</body>
</html>