<html>
<head>
    <title>SimpleStub: Handling Class-loaders</title>
</head>
<body>
<h2>Handling Class-loaders</h2>

<p>Some servers separate classes according to multiple class-loaders, with each thread having its own. Testing the
    behavior of such systems often setting the thread context class-loader and having code attempt to load classes from it.
    SimpleStub provides support for safely setting the thread context class-loader and priming it with test classes.
</p>
<p>
    The following example tests some behavior of the <code>Reader</code> class. This class reads serialized data from
    an input stream, using the thread context class-loader to find any application-specific classes. Any class which
    implements the <code>Tagged</code> interface will have its <code>applicationName</code> property set to the
    corresponding property from its classloader (which also implements that interface).
</p>

<p>We'll start by creating a setup class:</p>

    <div class="source">
        <pre>
    <b>abstract static class</b> ClassLoaderControl {
        <b>private</b> Memento memento = Memento.NULL;

        <b>static void</b> install() <b>throws</b> NoSuchFieldException {
            memento = ThreadContextClassLoaderSupport.install(<b>new</b> TaggedClassLoader("test1"));
        }

        <b>static void</b> uninstall() {
            memento.revert();
        }
    }</pre>
    </div>

    <p>We can then write some tests, assuming the existing of an appropriate class-loader class, and a method which
    can instantiate and serialize an instance, returning a byte array.</p>


<div class="source">
    <pre>
    <i>@Before</i>
    <b>public void</b> setUp() <b>throws</b> Exception {
        ClassLoaderControl.install();
    }

    <i>@After</i>
    <b>public void</b> tearDown() {
        ClassLoaderControl.uninstall();
    }

    <i>@Test</i>
    <b>public void</b> whenTaggedClassRead_setProperty() {
        ThreadContextClassLoaderSupport.createStubInThreadContextClassLoader("my.Class", BaseClass.class);
        BaseClass in = (BaseClass) Thread.current.getContextClassLoader().loadClass("my.class");
        byte[] bytes = populateAndSerialize(base);

        BaseClass out = reader.read(new ByteArrayInputStream(bytes));

        assertThat(out.getApplicationName(), is("test1");
    }
</pre>
</div>

    <p>while the <code>Reader</code> class is never given the classloader, and the instance is only found in the
        thread context classloader, the code now is able to read it, allowing us to test that behavior.</p>



</body>
</html>