<html>
<head>
    <title>SimpleStub: Handling Class-loaders</title>
</head>
<body>
<h2>Handling Class-loaders</h2>

<p>Some servers separate classes according to multiple class-loaders, with each thread having its own. Testing the
    behavior of such systems often setting the thread context class-loader and having code attempt to load classes from it.
    SimpleStub provides support for safely setting the thread context class-loader and priming it with test classes.
</p>
<p>
    The following example tests some behavior of the <code>Reader</code> class. This class reads serialized data from
    an input stream, using the thread context class-loader to find any application-specific classes.
</p>





<p>The first thing we do is to create an appropriate stub class:</p>

    <div class="source">
        <pre>
    <b>abstract static class</b> TimerStub <b>implements</b> Timer {
        <b>private long</b> secondsSinceStartup = 0;
        <b>private</b> Memento memento = Memento.NULL;

        <b>static void</b> install() <b>throws</b> NoSuchFieldException {
            memento = StaticStubSupport.install(TimerManager.<b>class</b>, "timer", createStub(TimerStub.<b>class</b>);
        }

        <b>static void</b> uninstall() {
            memento.revert();
        }

        <b>static void</b> setSecondsSinceStartup(<b>long</b> seconds) { secondsSinceStartup = seconds; }

        <i>@Override</i>
        <b>public long</b> getSecondsSinceStartup() { <b>return</b> secondsSinceStartup; }
    }</pre>
    </div>

    <p>In addition to providing a test implementation of our method, and a way to give it a value, we've also created a pair
       of methods to install and uninstall the stub itself, using StaticStubSupport. Now we can use this in a test:</p>

<div class="source">
    <pre>
    <i>@Before</i>
    <b>public void</b> setUp() <b>throws</b> Exception {
        TimerStub.install();
    }

    <i>@After</i>
    <b>public void</b> tearDown() {
        TimerStub.uninstall();
    }

    <i>@Test</i>
    <b>public void</b> afterNineSeconds_lightNotWarm() {
        TimerStub.setSecondsSinceStartup(9);
        assertFalse(light.isWarm());
    }

    <i>@Test</i>
    <b>public void</b> afterTenSeconds_lightIsWarm() {
        TimerStub.setSecondsSinceStartup(10);
        assertTrue(light.isWarm());
    }</pre>
    </div>

    <p>thus verifying that the <code>isMature</code> method is reading the Timer and changing state once ten seconds have elapsed.</p>



</body>
</html>